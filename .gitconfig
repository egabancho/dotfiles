[user]
    name = Esteban J. G. Gabancho
    email = esteban.gabancho@gmail.com
    signingkey = 0F809AC0AF0DA61E

[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    lc = log ORIG_HEAD.. --stat --no-merges

    st = status
    # View the current working tree status using the short format
    s = status -s

   # Clone a repository including all submodules
    c = clone --recursive

    ci = commit
    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    br = branch
    co = checkout
    # Switch to PR
    copr = "!f(){ \
                if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
                    git fetch origin refs/pull/$1/head:pr/$1 && \
                    git checkout pr/$1; \
                fi \
            }; f"

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    df = diff
    dc = diff --cached

    # Pull and pull --rebase
    p = pull
    pr = pull --rebase

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    undo = reset --hard

    # Work with unmerged changes
    edit-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; vim `f`"
    add-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"

     # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Remove PR branches
    dpr = "!git branch | grep 'pr/*' | xargs -n 1 git branch -D"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    #Create new alias
    alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
    # Show existing aliases
    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

    # Merge GitHub pull request on top of the `master` branch
     mpr = "!f() { \
                if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
                    git fetch origin refs/pull/$1/head:pr/$1 && \
                    git checkout master && \
                    git merge --ff-only pr/$1 && \
                    git branch -D pr/$1; \
                fi \
            }; f"

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f

[grep]
    linenumber = true

[diff]
    # Detect copies as well as renames
    renames = copies

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    ff = only
    conflictstyle = diff3

[core]
    editor = vim

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore_global

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    commit = green bold
    frag = magenta bold # line info
    old = red bold# deletions
    new = green bold# additions
    whitespace = red reverse

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = "red bold 52"
    newNormal = green bold
    newHighlight = "green bold 22"

[color "status"]
    added = blue bold
    changed = yellow bold
    untracked = red bold

[filter "hawser"]
    clean = git hawser clean %f
    smudge = git hawser smudge %f
    required = true

[push]
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[ghi]
    token = !security find-internet-password -a egabancho -s github.com -l 'ghi token' -w

[commit]
    gpgsign = true

[magithub]
    online = false

[magithub "status"]
    includeStatusHeader = false
    includePullRequestsSection = false
    includeIssuesSection = false
